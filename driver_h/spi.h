#ifndef SPI_H
#define SPI_H
#include "avr_cmsis.h"
//*******************************************************************
//		Настройка модуля SPI										*
//------------------------------------------------------------------*
// включение подтяжки с помощью встроенных резисторов				* 
#define PORT_SPI	PORTB	// порт									*
#define DDR_SPI		DDRB	// 										*
#define SS			0		// линия выбора ведомого				*
#define MOSI		2		// линия передача данных от мастера		*
#define MISO		3		// линия прием данных мастером			*
#define SCK			1		// линия тактирования					*
#define def_SS				// выбор чипа по умолчанию				*
//*******************************************************************
//------------------------------------------------------------------*
// направление передачи бита										*
typedef enum												//		*
{															//		*
MSB=0,	// Старшим битом вперед										*
LSB=1	// Младшим битом вперед										*
} dord_t;													//		*
//------------------------------------------------------------------*
// Полярность тактирующих импульсов									*
typedef enum												//		*
{															//		*
idle_low=0,	// В режиме ожидания тактирующая линия в низ. уровне	*
idle_high=1	// В режиме ожидания тактирующая линия в высок. уровне	*
} cpol_t;													//		*
//------------------------------------------------------------------*
// Фаза считывания данных											*
typedef enum													//	*
{																//	*
read_first=0,	// Считывание данных по первому фронту				*
read_second=1	// Считывание данных по второму фронту				*
} cpha_t;														//	*
//------------------------------------------------------------------*
// Настройка скорости передачи										*
typedef enum													//	*
{																//	*
div_2=	4,														//	*
div_4=	0,														//	*
div_8=	5,														//	*
div_16=	1,														//	*
div_32=	6,														//	*
div_64=	2,														//	*
div_128=3														//	*
} spr_t;														//	*
//------------------------------------------------------------------*
//	Структура для настройка SPI										*
typedef struct													//	*
{																//	*
dord_t dord:1; // направление передачи байта						*
cpol_t cpol:1; // полярность при тактового 							*
cpha_t cpha:1; // фаза считывания данных							*
spr_t  div: 3; // предделитель тактирования							*
} SpiSet_t;														//	*
//------------------------------------------------------------------*

//*******************************************************************
//	Инициализация модуля, настройка									*
void init_spi(SpiSet_t set);									//	*
//------------------------------------------------------------------*
//	Прием и передача байта											*
uint8_t SPI_Byte(uint8_t data);									//	*
//------------------------------------------------------------------*
//	Прием и передача массива байтов длиной NUM						*
void SPI_Array(uint8_t *input, uint8_t *output, uint8_t num);	//	*
//*******************************************************************
#endif
