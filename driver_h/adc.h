#ifndef ADC_H
#define ADC_H
#include <atmega16_32.h>
//***********************************************************************
#define ADC_REDUCE_FLASH // уменьшение размера кода
#define ADC_OPTIM_BIT_10 // оптимизация для работы с 10 битами
						 // иначе для 
// Несимметричный вход
#ifndef ADC_SINLE_T
#define ADC_SINLE_T
typedef enum
{
ADC0 = 0,
ADC1 = 1,
ADC2 = 2,
ADC3 = 3,
ADC4 = 4,
ADC5 = 5,
ADC6 = 6,
ADC7 = 7
}adc_single_t ;
#endif
//-----------------------------------------
// Дифференциальные входы
typedef enum
{
/*
in+  in-
*/
ADC0_ADC0_10x = 8,
ADC1_ADC0_10x = 9,
//---------------
ADC0_ADC0_200x = 10,
ADC1_ADC0_200x = 11,
//---------------
ADC2_ADC2_10x = 12,
ADC3_ADC2_10x = 13,
//---------------
ADC2_ADC2_200x = 14,
ADC3_ADC2_200x = 15,
//---------------
ADC0_ADC1_1x = 16,
ADC1_ADC1_1x = 17,
ADC2_ADC1_1x = 18,
ADC3_ADC1_1x = 19,
ADC4_ADC1_1x = 20,
ADC5_ADC1_1x = 21,
ADC6_ADC1_1x = 22,
ADC7_ADC1_1x = 23,
//----------------
ADC0_ADC2_1x = 24,
ADC1_ADC2_1x = 25,
ADC2_ADC2_1x = 26,
ADC3_ADC2_1x = 27,
ADC4_ADC2_1x = 28,
ADC5_ADC2_1x = 29,
}adc_diff_t ;
//-----------------------------------------
// Коэффициент предделителя для АЦП
typedef enum 
{
adc_div2 = 1, 
adc_div4 = 2,
adc_div8 = 3,
adc_div16= 4,
adc_div32= 5,
adc_div64= 6,
adc_div128=7 
} rate_convert_t;
//-----------------------------------------
// Выбор источника опорного напряжения
typedef enum
{
external_AREF=0, // Внешний ИОН пин AREF
source_AVcc  =1, // Напряжение питания AVcc
internal_AREF=3  // Внутренний ИОН 2.56В
}ref_volt_t;

//--------------------------------------------
// Источники запуска АЦП
typedef enum
{
free_running_mode=0, // Запуск непрерывный
analog_comparator=1, // Запуск от КОМПАРАТОРА
exter_INT0		 =2, // Запуск по внешнему прерыванию INT0
timer0_compare	 =3, // Запуск по СОВПАДЕНИЮ
timer0_overflow	 =4, // Запуск по ПЕРЕПОЛНЕНИЮ
timer1_COMP_B	 =5, // Запуск по СОВПАДЕНИЮ_В
timer1_overflow	 =6, // Запуск по ПЕРЕПОЛНЕНИЮ
timer1_capture	 =7	 // Запуск по ЗАХВАТУ
}adc_start_t;
//***********************************************************************

//***********************************************************************
//
//
//		Настройка	 А Ц П 
//
//----------------------------------------------------------------------*
// Включение/Отключение АЦП
#define ADC_SWITCH(state)	adcsra->aden=state;  sfior->acme=0
//----------------------------------------------------------------------*
// Инициализация АЦП
// Частота должна быть 50..200kHz
// Частота Fadc=Fcpu/rate
void adc_init(rate_convert_t rate, // предделитель для АЦП
			  ref_volt_t volt);	   // выбор опорного напряжения
//----------------------------------------------------------------------*
// Дополнительные источники запуска АЦП
void ADC_SOURCE_START(FuncState_t state,
						adc_start_t start);
//----------------------------------------------------------------------*
// Сброс флага прерывания АЦП
#define ADC_RESET_FLAG()	adcsra->adif=1
//***********************************************************************

//***********************************************************************
//
//	Выполнение преобразования АЦП
//
//------------------------------
// Результат преобразования для несимметричного входа 
// ADC= Vin*1024/Vref
// Результат для дифф входа
// ADC=(Vpos-Vneg)*K*512/Vref
//----------------------------------------------------------------------*
// Дифференциальные выходы
int8_t  ADC_DIFF_INPUT_BIT7(adc_diff_t adc);
int16_t ADC_DIFF_INPUT_BIT9(adc_diff_t adc);
//----------------------------------------------------------------------*
// Несимметричный выход
uint8_t  ADC_SINGLE_BIT8 (adc_single_t adc);
uint16_t ADC_SINGLE_BIT10(adc_single_t adc);
//***********************************************************************
#endif
