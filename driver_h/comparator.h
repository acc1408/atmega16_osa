#ifndef COMPARATOR_H
#define COMPARATOR_H
#include "avr_cmsis.h"
//***********************************************************************
//																		*
//		Типы данных для работы с КОМПАРАТОРОМ							*
//																		*
//----------------------------------------------------------------------*
// Настройка пина AIN0													*
typedef enum														//	*
{																	//	*
PIN_AIN0=0, // Подключение пина AIN0									*
ION_AIN0=1  // Подключение вместо пина ИОН								*
}ain0_t;															//	*
//----------------------------------------------------------------------*
//	Выбор канала AIN0 из мультиплексора АЦП								*	
#ifndef ADC_SINLE_T													//	*
#define ADC_SINLE_T													//	*
typedef enum														//	*
{																	//	*
ADC0 = 0,															//	*
ADC1 = 1,															//	*
ADC2 = 2,															//	*
ADC3 = 3,															//	*
ADC4 = 4,															//	*
ADC5 = 5,															//	*
ADC6 = 6,															//	*
ADC7 = 7															//	*
}adc_single_t ;														//	*
#endif																//	*
//----------------------------------------------------------------------*
//	Выбор события перерывания											*
typedef enum														//	*
{																	//	*
ANY_TOGGLE=0,	// Прерывание по изменению состояния					*
FALLING_edge=2, // Прерывание при переходе с 1 на 0						*
RISING_edge=3	// Прерывание при переходе с 0 на 1						*
}an_comp_isr;														//	*
//***********************************************************************

//***********************************************************************
//																		*
//		Функции для работы с КОМПАРАТОРОМ								*
//																		*
//----------------------------------------------------------------------*
//	Включение/отключение компаратора									*
#define AnComp_ENABLE(state)	acsr->acd=~state					//	*
//----------------------------------------------------------------------*
//	Результат сравнения компаратора										*
//	Если (AINO>AIN1), то AnComp_RETURN()=1								*
#define AnComp_RETURN()		acsr->aco								//	*
//----------------------------------------------------------------------*
//	Настройка входа AINO												*
void AnComp_SETTING_AINO(ain0_t pin);								//	*
//----------------------------------------------------------------------*
//	Настройка мультиплексора ADC на вход AIN1							*
void AnComp_AIN1_to_ADC(FuncState_t state,// Включение выбора канала	*
						adc_single_t pin); // Выбор канала				*
//***********************************************************************

//***********************************************************************
//																		*
//		Функции для работы с Прерыванием КОМПАРАТОРА					*
//																		*
//----------------------------------------------------------------------*
// Включение/отключение прерывания										*
// Вектор прерывания: ANA_COMP_vect										*
#define AnComp_ISR(state)		acsr->acie=state					//	*
//----------------------------------------------------------------------*
//	Настройка события прерывания										*
void AnComp_Setting_ISR(an_comp_isr isr);							//	*
//***********************************************************************

#endif
