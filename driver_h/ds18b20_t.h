#ifndef DS18B20_H
#define DS18B20_H
#include <avr_cmsis.h>
#include <driver_h/crc8.h>
#include <driver_h/sdvig.h>
#include <avr/io.h>
#include <util/delay.h>
// при подключении <math.h> необходимо подключение libm.a
//#include <math.h>
//*******************************************************************************
/*
// Пример инициализации
bus_1wire_t trm;
void init_ds18b20(void)
{
trm.ddr=(uint8_t*)&DDRB; //настроили порт
trm.pin=PINA7;			 //настроили пин
ds18b20_setting_ROM_less(trm, // настройка шины
								 resol_12,// настройка разрешения
								 85,  // минимальная температура в градусах
								 10  // максимальная температура в градусах
								);
}
// Пример считывания температуры
char st[20];
uint16_t temp;
ds18b20_Start_ROM_less(trm); //
delay_convert_temp(resol_12);
ds18b20_Result_ROM_less(trm[i], &temp);
temp=conver_int(temp);
sprintf(st,"temper %2d",temp);
*/
//*******************************************************************************
//																				*
//		Общие команды для 1-wire												*
// ROM commands																	*
#define DALLAS_READ_ROM				0x33 // Чтение ROM кода, 1 устройство		*
#define DALLAS_MATCH_ROM			0x55 // Совпадение ROM, много уст-в			*
#define DALLAS_SKIP_ROM				0xCC // Пропуск ROM, обращение к всем уст-вам
#define DALLAS_SEARCH_ROM			0xF0 // Поиск ROM							*
#define DALLAS_CONDITIONAL_SEARCH	0xEC // Поиск устройств в состоянии тревоги	*
//------------------------------------------------------------------------------*
//
//		Команды для работы с DS18B20											*
// function commands															*
#define DS18B20_CONVERT_TEMP		0x44 // Преобразование температуры			*
#define DS18B20_WRITE_SCRATCHPAD	0x4E // Запись памяти						*
#define DS18B20_READ_SCRATCHPAD		0xBE // Чтение памяти устройства			*
#define DS18B20_COPY_SCRATCHPAD		0x48 // Копирование EEPROM в RAM			*
#define DS18B20_RECALL_E2			0xB8 // Перезагрузка EEPROM					*
#define DS18B20_READ_POWER			0xB4 // Определение режима питания			*
//------------------------------------------------------------------------------*
// dallas return error codes СТАТУС ВЫПОЛНЕНИЯ									*
#define DALLAS_NO_ERROR				0			// all is well					*
#define DALLAS_PRESENCE				'h'			// presence was detected		*
#define DALLAS_NO_PRESENCE			'g'			// presence wasn't detected		*
#define DALLAS_VERIFY_ERROR			'v'			// setup verification failed	*
#define DALLAS_ADDRESS_ERROR		'a'			// bad address for command: either wrong family or bad CRC
#define DALLAS_CRC_ERROR			'c'			// data/return value fails CRC check
#define DALLAS_DEVICE_ERROR			'd'			// device not responding		*
#define DALLAS_NULL_POINTER			'p'			// dallas function passed a NULL pointer
#define DALLAS_ZERO_LEN				'z'			// ReadRAM or WriteRAM asked to read/write zero bytes
#define DALLAS_BUS_ERROR			'b'			// Bus hardware error. (wrong voltage) Possible causes:
													// - lack of pullup Resistor*
													// - Other master transmitting (Dallas is not multi-master)
													// - Device failure			*
//*******************************************************************************
// Определения для задержки на преобразование									*
#define delay_ms94		_delay_ms(94)										//	*
//*******************************************************************************

//*******************************************************************************
//																				*
//		Тип данных для работы с датчиком DS18b20								*
//																				*
//*******************************************************************************
//	Определение порта для сигнального провода									*
typedef struct																//	*
{																			//	*
uint8_t *ddr; 	// название порта												*
uint8_t pin;	 // название пина												*
}bus_1wire_t;																//	*
//------------------------------------------------------------------------------*
//	Структура для хранения считанных байт из датчика DS18b20					*
typedef struct																//	*
{																			//	*
	uint8_t byte[8];														//	*
} dallas_rom_id_t;															//	*
//------------------------------------------------------------------------------*
//	Разрешение измерения датчика DS18b20										*
typedef enum																//	*
{																			//	*
resol_9=0x1F, 	// разрешение 9 бит												*
resol_10=0x3F,	// разрешение 10 бит											*
resol_11=0x5F,	// разрешение 11 бит											*
resol_12=0x7F	// разрешение 12 бит											*
}resolution;																//	*
//*******************************************************************************

//*******************************************************************************
//																				*
//	Низкоуровневые функции														*
//																				*
//------------------------------------------------------------------------------*
// Инициализация (сброс) шины													*
uint8_t dallasReset(bus_1wire_t bus);										//	*
//------------------------------------------------------------------------------*
// Запись байта																	*
void dallasWriteByte_my(bus_1wire_t bus,uint8_t byte);						//	*
//------------------------------------------------------------------------------*
// Чтение байта																	*
uint8_t dallasReadByte_my(bus_1wire_t bus);									//	*
//*******************************************************************************

//*******************************************************************************
//																				*
//	Высокоуровненые функции с пропуском ROM адреса								*
//																				*
//------------------------------------------------------------------------------*
//	настройка разрешения, миним и максим температур								*
uint8_t ds18b20_setting_ROM_less											//	*
		(bus_1wire_t bus, // настройка шины										*
		resolution	resol,// настройка разрешения								*
		int8_t	min,  // минимальная температура в градусах						*
		int8_t	max); // максимальная температура в градусах					*
//------------------------------------------------------------------------------*
//	старт преобразования														*
// Результат фукнции Статус преобразования (пример: DALLAS_NO_ERROR)			*
uint8_t ds18b20_Start_ROM_less(bus_1wire_t bus);							//	*
//------------------------------------------------------------------------------*
//	Задержка на преобразование													*
//	Длительность задержки задержки зависит от разрешения						*
void delay_convert_temp(resolution resol);									//	*
//------------------------------------------------------------------------------*
//	Чтение результата преобразования											*
uint8_t ds18b20_Result_ROM_less(bus_1wire_t bus, uint16_t *temp);			//	*
//------------------------------------------------------------------------------*
// Перевод преобразования в темпретуру											*
// Результат целочисленные градусы												* 
int8_t conver_int(uint16_t temp);											//	*
//------------------------------------------------------------------------------*
// Перевод преобразования в темпретуру											*
// Результат дробные градусы													*
// Необходимо подключение библиотки math.h										* 
#define conver_double(temp)	temp*0.0625 									//	*
//*******************************************************************************
//=================================================================*
//	Высокоуровненые функции с ROM адресом
//------------------------------------------------------
// Получение ROM адреса
// Результат выполнения функции СТАТУС ВЫПОЛНЕНИЯ
uint8_t  dallasReadROM(bus_1wire_t bus,  // настройка шины
					dallas_rom_id_t* rom);// указатель на адрес ROM адреса
#endif
