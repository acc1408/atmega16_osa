#ifndef TIMER16_1_h
#define TIMER16_1_h
#include "atmega16_32.h"

//***********************************************************************
//																		*
//		Состояние выхода ОС1(A/B)										*
//																		*
//----------------------------------------------------------------------*
//																		*
#define DDR_OC1	ddrd	// регистр управления выводом					*
#define PIN_OC1A p5		// пин для настройки							*
#define PIN_OC1B p4		// пин для настройки							*
//																		*
//***********************************************************************

//***********************************************************************
//																		*
//		Типы данных для Настройки ШИМ режима							*
//																		*
//----------------------------------------------------------------------*
//	Настройка модуля счета для режима ШИМ								* 
#ifndef SETTING_PWM_T												//	*
#define SETTING_PWM_T												//	*
typedef enum														//	*
{																	//	*
bit8	=0b01, // 8 бит = 255											*
bit9	=0b10, // 9 бит	= 511											*
bit10	=0b11  // 10 бит=1023											*
} bit16_t;															//	*
//----------------------------------------------------------------------*
//	Настройка режима в Phase Correct PWM								*
typedef enum														//	*
{																	//	*
Ph_Fre_Corr=0b00, // Фазово-Частотная Коррекция							*
Ph_Corr=0b10	  // Фазовая Коррекция									*
} ph_cor_t;															//	*
#endif																//	*
//***********************************************************************


//***********************************************************************
//																		*
//		Состояние выхода ОС												*
//																		*
//----------------------------------------------------------------------*
//	Состояние выхода в режиме СЧЕТЧИКА									*	
#ifndef COUNT_T
#define COUNT_T
typedef enum														//	*
{																	//	*
OC0_disconnet=0b00,	// Вывод ОС0 отключен от счетчика					*
OC0_toggle	 =0b01,	// Вывод ОС0 состояние меняется на противоположенное*
OC0_clear	 =0b10,	// Вывод ОС0 сбрасывается в 0						*
OC0_set		 =0b11	// Вывод ОС0 устанавливается в 1					*
}count_OC_t;														//	*
//----------------------------------------------------------------------*
//	Состояние выхода в режиме ШИМ										*
typedef enum														//	*
{																	//	*
OC0_pwm_disconnet=0b00,// Вывод ОС0 отключен от счетчика			//	*
OC0_pwm_clear	 =0b10,// Вывод ОС0 сбрасывается в 0 при равествен 	//	*
					   // TCNT==OCR и устанавливается в 1 при TCNT==0xFF*
OC0_pwm_set 	 =0b11 // Вывод ОС0 сбрасывается в 1 при равествен 		*
					   // TCNT==OCR и устанавливается в 0 при TCNT==0xFF*
}pwm_OC_t;															//	*
#endif
//***********************************************************************

//=======================================================================
//=======================================================================
//***********************************************************************
//																		*
//	Ф У Н К Ц И И И		Д Л Я	Р А Б О Т Ы 	С	T I M E R 1 6		*
//																		*
//***********************************************************************

//***********************************************************************
//																		*
//		Настройка работы  в режиме СЧЕТЧИК								*
//																		*
//----------------------------------------------------------------------*
// Инициализация режима NORMAL											*
// Вектор прерывания: TIMER1_OVF_vect									*
// Частота прерываний: F_tim=F_CPU/(N*0xFFFF)							*
void TIMER16_1_NORMAL(FuncState_t state_ISR);//Состояние прерывания
//----------------------------------------------------------------------*
// 	Инициализация режима CTC (сброс при совпадении для регистра ICR1)	*
// Вектор прерывания: TIMER1_CAPT_vect									*
// Частота прерываний: F_tim=F_CPU/(N*ICR1)								*
//  где N - предделитель таймера										*
void TIMER16_1_CTC_ICR1(uint16_t ICR, // значение регистра перезагрузки	*
		 FuncState_t state_ISR); // состояние прерывний			*
//----------------------------------------------------------------------*
// 	Инициализация режима CTC (сброс при совпадении для регистра OCR1A)	*
// Вектор прерывания: TIMER1_COMPA_vect									*
// Частота прерываний: F_tim=F_CPU/(N*OCR)								*
//  где N - предделитель таймера										*
void TIMER16_1_CTC_OCR1A(uint16_t OCR, // значение регистра перезагрузки*
		 FuncState_t state_ISR); // состояние прерывний			*
//----------------------------------------------------------------------*
//======================================================================*
//																		*
//	Настройка режима СОВПАДЕНИЯ и ВЫХОДОВ OC1A/OC1B	в режиме СЧЕТЧИК	*
//																		*
//----------------------------------------------------------------------*
// Настройка режима СОВПАДЕНИЯ и  ВЫХОДА OC1A							*
void TIMER16_1_COUNT_OCR1A(count_OC_t count);//настройка режима ВЫВОДОВ ОС1A*
//----------------------------------------------------------------------*
// Настройка режима СОВПАДЕНИЯ, ПРЕРЫВАНИЯ и  ВЫХОДА OC1B				*
void TIMER16_1_COUNT_OCR1B(count_OC_t count);//настройка режима ВЫХОДА ОС1В*
//***********************************************************************

//***********************************************************************
//																		*
//				Работы таймера в режиме Ш И М							*
//																		*
//----------------------------------------------------------------------*
//		Режим 	F A S T		P W M										*
//----------------------------------------------------------------------*
// Режим Fast PWM с выбором модуля счета (8,9,10 бит)					*
// Вектор прерывания: TIMER1_OVF_vect									*
// Частота прерываний: F_tim=F_CPU/((2^bit)*N)							*
//  где N - предделитель таймера										*
void TIMER16_1_FAST_PWM_reslt(bit16_t bit, // модуль счета				*
	     	  FuncState_t state_ISR); // состояние прерывния		*
//----------------------------------------------------------------------*
// Режим Fast PWM с настройкой модуля счета в регистре ICR1				*
// Вектор прерывания: TIMER1_CAPT_vect									*
// Частота прерываний: F_tim=F_CPU/((ICR1+1)*N)							*
//  где N - предделитель таймера										*
void TIMER16_1_FAST_PWM_ICR1(uint16_t ICR, // значение рег-ра перез-ки	*
		 FuncState_t state_ISR); // состояние прерывний			*
//----------------------------------------------------------------------*
// Режим Fast PWM с настройкой модуля счета в регистре OCR1A			*
// Вектор прерывания: TIMER1_COMPA_vect									*
// Частота прерываний: F_tim=F_CPU/((OCR1A+1)*N)							*
//  где N - предделитель таймера										*
void TIMER16_1_FAST_PWM_OCR1A(uint16_t OCR, // значение рег-ра перез-ки	*
		 FuncState_t state_ISR); // состояние прерывний			*
//----------------------------------------------------------------------*
//		Режим 	P H A S E	C O R R E C T		P W M					*
//----------------------------------------------------------------------*
// Режим Phase Correct PWM с выбором модуля счета (8,9,10 бит)			*
// Вектор прерывания: TIMER1_OVF_vect									*
// Частота прерываний: F_tim=F_CPU/(2*(2^bit-1)*N)						*
//  где N - предделитель таймера										*
void TIMER16_1_PhasCorr_PWM_reslt(bit16_t bit, // модуль счета			*
	     		FuncState_t state_ISR); // состояние прерывния	*
//----------------------------------------------------------------------*
// Режим Phase Correct PWM с настройкой модуля счета в регистре ICR1	*
// Вектор прерывания: TIMER1_CAPT_vect									*
// Частота прерываний: F_tim=F_CPU/(2*ICR1*N)							*
//  где N - предделитель таймера										*
void TIMER16_1_PhaseCorr_PWM_ICR1(ph_cor_t mode,//Выбор режим Фаз.Кор-ции
					uint16_t ICR, // значение регистра перезагрузки		*
				    FuncState_t state_ISR); // состояние прерывния*
//----------------------------------------------------------------------*
// Режим Phase Correct PWM с настройкой модуля счета в регистре OCR1A	*
// Вектор прерывания: TIMER1_COMPA_vect									*
// Частота прерываний: F_tim=F_CPU/(2*OCR1A*N)							*
//  где N - предделитель таймера										*
void TIMER16_1_PhaseCorr_PWM_OCR1A(ph_cor_t mode,//Выбор режим Фаз.Кор-ции
					uint16_t OCR, // значение регистра перезагрузки		*
				    FuncState_t state_ISR); // состояние прерывния*
//----------------------------------------------------------------------*
//======================================================================*
//																		*
//	Настройка режима СОВПАДЕНИЯ и ВЫХОДОВ OC1A/OC1B	в режиме ШИМ		*
//																		*
//----------------------------------------------------------------------*
// Настройка режима СОВПАДЕНИЯ и  ВЫХОДА OC1A							*
// Вектор прерывания: TIMER1_COMPA_vect									*
void TIMER16_1_PWM_OCR1A(uint16_t OCR, // значение регистра СРАВНЕНИЯ	*
		  FuncState_t state_ISR, // настройка ПРЕРЫВАНИЯ			*
					 pwm_OC_t count); // настройка режима ВЫВОДОВ ОС1A	*
//----------------------------------------------------------------------*
// Настройка режима СОВПАДЕНИЯ, ПРЕРЫВАНИЯ и  ВЫХОДА OC1B				*
// Вектор прерывания: TIMER1_COMPB_vect									*
void TIMER16_1_PWM_OCR1B(uint16_t OCR, //настройка регистра СРАВНЕНИЯ	*
		  FuncState_t state_ISR, // вкл/откл. ПРЕРЫВНИЯ			*
					 pwm_OC_t count); // настройка режима ВЫХОДА ОС1В	*
//***********************************************************************

//***********************************************************************
//																		*
//		Принудительное изменение состояния вывода OCn					*
//																		*
//----------------------------------------------------------------------*
//	Изменение состояния вывода ОС1A										*
#define TIMER16_1_OC1A_toggle()		tccr1a->foc1a=1					//	*
//----------------------------------------------------------------------*
//	Изменение состояния вывода ОС1B										*
#define TIMER16_1_OC1B_toggle()		tccr1a->foc1b=1					//	*
//***********************************************************************

//***********************************************************************
//																		*
//		Установка маски (разрешения/запрета) прерывания					*
//																		*
//----------------------------------------------------------------------*
//	Установка маски ПЕРЕПОЛНЕНИЯ для TIMER16_1							*
#define TIMER16_1_ISR_OVERFLOW(state)		timsk->toie1=state		//	*
//----------------------------------------------------------------------*
//	Установка маски СРАВНЕНИЯ для OCR1A для TIMER16_1					*
#define TIMER16_1_ISR_COMPARE_A(state)		timsk->ocie1a=state		//	*
//----------------------------------------------------------------------*
//	Установка маски СРАВНЕНИЯ для OCR1B для TIMER16_1					*
#define TIMER16_1_ISR_COMPARE_B(state)		timsk->ocie1b=state		//	*
//----------------------------------------------------------------------*
//	Установка маски ЗАХВАТА для TIMER16_1								*
#define TIMER16_1_ISR_CAMPARE(state)		timsk->ticie1=state		//	*
//***********************************************************************


//***********************************************************************
//																		*
//		Запуск/Остановка 	T I M E R 1 6 								*
//																		*
//----------------------------------------------------------------------*
#ifndef TIMER_CLK													//	*
#define TIMER_CLK													//	*
//----------------------------------------------------------------------*
#define TIMER_CLK_STOP		0x00	///< Timer0 остановлен				*
#define TIMER_CLK_DIV1		0x01	///< Timer считает как F_CPU		*
#define TIMER_CLK_DIV8		0x02	///< Timer считает как F_CPU/8		*
#define TIMER_CLK_DIV64		0x03	///< Timer считает как F_CPU/64		*
#define TIMER_CLK_DIV256	0x04	///< Timer считает как F_CPU/256	*
#define TIMER_CLK_DIV1024	0x05	///< Timer считает как F_CPU/1024	*
#define TIMER_CLK_T_FALL	0x06	///< Timer считывает сигнал с 		*
									// вывода T0 по спадающему фронту	*
#define TIMER_CLK_T_RISE	0x07	///< Timer считывает сигнал с 		*
									// вывода T0 по нарастающему фронту	*
//----------------------------------------------------------------------*
#endif																//	*
//----------------------------------------------------------------------*
//	Запуск/Остановка TIMER16_1											*
#define TIMER16_1_RUN(clk)	tccr1b->cs1=clk							//	*
//***********************************************************************


//***********************************************************************
//																		*
//		Проверка флагов прерывания для TIMER16							*
//																		*
//----------------------------------------------------------------------*
//	Проверка флага ПЕРЕПОЛНЕНИЯ для TIMER16_1							*
#define TIMER16_1_IS_FLAG_OVERFLOW()		tifr->tov1				//	*
//----------------------------------------------------------------------*
//	Проверка флага СРАВНЕНИЯ для OCR1A для TIMER16_1					*
#define TIMER16_1_IS_FLAG_COMPARE_A()		tifr->ocf1a				//	*
//----------------------------------------------------------------------*
//	Проверка флага СРАВНЕНИЯ для OCR1B для TIMER16_1					*
#define TIMER16_1_IS_FLAG_COMPARE_B()		tifr->ocf1b				//	*
//----------------------------------------------------------------------*
//	Проверка флага ЗАХВАТА для TIMER16_1								*
#define TIMER16_1_IS_FLAG_CAPTURE()			tifr->icf1				//	*
//***********************************************************************


//***********************************************************************
//																		*
//		Сброс флагов прерывания для TIMER16_1							*
//																		*
//----------------------------------------------------------------------*
//	Сброс флага ПЕРЕПОЛНЕНИЯ для TIMER16_1								*
#define TIMER16_1_FLAG_RESET_OVERFLOW()			TIFR=(1<<TOV1)		//	*
//----------------------------------------------------------------------*
//	Сброс флага СРАВНЕНИЯ для OCR1A для TIMER16_1						*
#define TIMER16_1_FLAG_RESET_COMPARE_A()		TIFR=(1<<OCF1A)		//	*
//----------------------------------------------------------------------*
//	Сброс флага СРАВНЕНИЯ для OCR1B для TIMER16_1						*
#define TIMER16_1_FLAG_RESET_COMPARE_B()		TIFR=(1<<OCF1B)		//	*
//----------------------------------------------------------------------*
//	Сброс флага ЗАХВАТА для TIMER16_1									*
#define TIMER16_1_FLAG_RESET_COMPARE()			TIFR=(1<<OCF2)		//	*
//***********************************************************************


//***********************************************************************
//																		*
//		Настройка ЗАХВАТА для TIMER16_1									*
//																		*
//----------------------------------------------------------------------*
//	Настройка ФРОНТА захвата											*
#define FALLING 0	// захват по СПАДАЮЩЕМУ  фронту						*
#define RISING 0	// захват по ВОСХОДЯЩЕМУ фронту						*
//----------------------------------------------------------------------*
#define COMPARE_SETTING(set)	tccr1b->ices1=set					//	*
//======================================================================*
//	Настройка ШУМОПОДАВЛЕНИЯ для блока ЗАХВАТА для TIMER16_1			*
#define FALLING 0	// захват по СПАДАЮЩЕМУ  фронту						*
#define RISING 0	// захват по ВОСХОДЯЩЕМУ фронту						*
//----------------------------------------------------------------------*
#define COMPARE_SETTING(set)	tccr1b->ices1=set					//	*
//----------------------------------------------------------------------*
//	Включение прерывания ЗАХВАТА для TIMER16_1							*
#define TIMER16_1_CAPTURE_ON()		timsk->ticie1=1					//	*
//***********************************************************************


#endif
