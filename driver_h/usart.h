#ifndef USART_H
#define USART_H
#include <atmega16_32.h>
// Настройка по умолчанию
#define NUM_RX 2 // размер буфера для приема
#define NUM_TX 40 // размер буфера для передачи
//---------------------------------------------
// Настройка режима передачи по-умолчанию
#define UART_RX on	// Прием включен
#define UART_TX on	// Передача включена
#define UART_BIT bit_8 // 8 битов для приема/передачи
#define UART_PAR no_par // Передача без проверка четности
#define UART_STOP bit1	// Кол-во стоп-итов 1
#define UART_SPEED	9600 // Скорость передача бит/сек 
//*******************************************************************************
//		Типы данных для настройки параметров U(S)ART							*
//------------------------------------------------------------------------------*
// включение/отключение RX/TX													*		
typedef enum																//	*
{																			//	*
off=0x00, 	// отключен															*
on=0x01,	// включен															*
}sw_t;																		//	*
//------------------------------------------------------------------------------*
// количество бит данных в пакете												* 
typedef enum																//	*
{																			//	*
bit_5=0x00, // 5 бит															*
bit_6=0x01,	// 6 бит															*
bit_7=0x02,	// 7 бит															*
bit_8=0x03	// 8 бит															*
}bitsize_t;																	//	*
//------------------------------------------------------------------------------*
// настройка проверки на четность/нечетность									*
typedef enum																//	*
{																			//	*
no_par=0x00, // выключена проверка												*
even=0x01,	// проверка на четность												*
odd=0x03,	// проверка на нечетность											*
}parity_t;																	//	*
//------------------------------------------------------------------------------*
// настройка кол-ва стопбитов													*
typedef enum																//	*
{																			//	*
bit1=0x00, 	// 1 - стоп бит														*
bit2=0x01	// 2 - стоп бита													*
}bitstop_t;																	//	*
//------------------------------------------------------------------------------*
// Режим синхронизации															*
typedef enum																//	*
{																			//	*
asynch=0x00, 	// режим асинхронный											*
synch=0x01		// режим синхронный												*
}usartmode_t;																//	*
//------------------------------------------------------------------------------*
// Выбор фронта для синхронизации												*
typedef enum																//	*
{																			//	*
tx_falling=0x00, 	// падающий для передачи и растущий для приема				*
tx_rising=0x01		// растущий для передачи и падающий для приема				*
}usartedge_t;																//	*
//------------------------------------------------------------------------------*
// Скокращение кол-ва настроек													*
#define only_asynch_uart // только асинхронный режим							*
//------------------------------------------------------------------------------*
// Структура для настройка U(S)ART												*
typedef struct																//	*
{																			//	*
sw_t 	  rx	:1;	// вкл/откл приемника										*
sw_t 	  tx	:1;	// вкл/откл передатчика										*
bitsize_t bit	:2; // кол-во бит для передачи									*
parity_t  par	:2; // проверка на четность										*
bitstop_t bits	:1; // кол-во стоп битов										*
#ifndef only_asynch_uart //для активизиации необходимо закомментировать #define *
  usartmode_t syn	:1; // режим синхронизации									*
  usartedge_t edge:1; // режим тактирования										*
#endif																		//	*
}usart_t;																	//	*
//------------------------------------------------------------------------------*

void UsartInit(void);		// инициализация по умолчанию
void usart_set(usart_t set); // настройка режима работы УАРТ
void uartSetBaudRate(uint32_t baudrate); //настройка скорости работа в бодах байт/секунда
void UartSendChar(char ch);				// передать байт в УАРТ
void UartSetRxHandler(void (*rx_func)(char c)); // настройка функции для приема данных
#endif
