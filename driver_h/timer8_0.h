#ifndef TIMER8_0_H
#define TIMER8_0_H
#include <atmega16_32.h>
// Last edit 07-07-18

//***********************************************************************
//																		*
//		Состояние выхода ОС_0											*
//																		*
//----------------------------------------------------------------------*
//																		*
#define DDR_OC0	ddrb	// регистр управления выводом					*
#define PIN_OC0 p3		// пин для настройки							*
//																		*
//***********************************************************************


//***********************************************************************
//																		*
//		Состояние выхода ОС												*
//																		*
//----------------------------------------------------------------------*
//	Состояние выхода в режиме СЧЕТЧИКА									*
#ifndef COUNT_T														//	*
#define COUNT_T														//	*	
typedef enum														//	*
{																	//	*
OC0_disconnet=0b00,	// Вывод ОС0 отключен от счетчика					*
OC0_toggle	 =0b01,	// Вывод ОС0 состояние меняется на противоположенное*
OC0_clear	 =0b10,	// Вывод ОС0 сбрасывается в 0						*
OC0_set		 =0b11	// Вывод ОС0 устанавливается в 1					*
}count_OC_t;														//	*
//----------------------------------------------------------------------*
//	Состояние выхода в режиме ШИМ										*
typedef enum														//	*
{																	//	*
OC0_pwm_disconnet=0b00,// Вывод ОС0 отключен от счетчика			//	*
OC0_pwm_clear	 =0b10,// Вывод ОС0 сбрасывается в 0 при равествен 	//	*
					   // TCNT==OCR и устанавливается в 1 при TCNT==0xFF*
OC0_pwm_set 	 =0b11 // Вывод ОС0 сбрасывается в 1 при равествен 		*
					   // TCNT==OCR и устанавливается в 0 при TCNT==0xFF*
}pwm_OC_t;															//	*
#endif																//	*
//***********************************************************************

//=======================================================================
//=======================================================================
//***********************************************************************
//																		*
//	Ф У Н К Ц И И И		Д Л Я	Р А Б О Т Ы 	С	T I M E R 8_0		*
//																		*
//***********************************************************************

//***********************************************************************
//																		*
//		Настройка работы  в режиме СЧЕТЧИК								*
//																		*
//----------------------------------------------------------------------*
// Инициализация режима NORMAL											*
// Вектор прерывания: TIMER0_OVF_vect									*
// Частота прерываний: F_tim=F_CPU/(256*N)								*
//  где N - предделитель таймера										*
void TIMER8_0_NORMAL(FuncState_t state_ISR);//Состояние прерывания*
//----------------------------------------------------------------------*
// 	Инициализация режима CTC (сброс при совпадении для регистра OCR0)	*
// Вектор прерывания: TIMER0_COMP_vect									*
// Частота прерываний: F_tim=F_CPU/(N*(1+OCR))							*
//  где N - предделитель таймера										*
void TIMER8_0_CTC_OCR0(uint8_t OCR, // значение регистра перезагрузки	*
		 FuncState_t state_ISR); // состояние прерывний			*
//----------------------------------------------------------------------*
//======================================================================*
//																		*
//	Настройка режима СОВПАДЕНИЯ и ВЫХОДА OC0	в режиме СЧЕТЧИК		*
//																		*
//----------------------------------------------------------------------*
// Настройка режима СОВПАДЕНИЯ и  ВЫХОДА OC0							*
// Вектор прерывания: TIMER0_COMP_vect									*
void TIMER8_0_COUNT_OCR0(uint8_t OCR, // значение регистра СРАВНЕНИЯ	*
		  FuncState_t state_ISR, // настройка ПРЕРЫВАНИЯ			*
					 count_OC_t count); // настройка режима ВЫВОДА ОС0  *
//***********************************************************************

//***********************************************************************
//																		*
//				Работы таймера в режиме Ш И М							*
//																		*
//----------------------------------------------------------------------*
//		Режим 	F A S T		P W M										*
//----------------------------------------------------------------------*
// Режим Fast PWM														*
// Вектор прерывания: TIMER0_OVF_vect									*
// Частота прерываний: F_tim=F_CPU/(256*N)								*
//  где N - предделитель таймера										*
void TIMER8_0_FAST_PWM(FuncState_t state_ISR);//состояние прерывния
//----------------------------------------------------------------------*
//		Режим 	P H A S E	C O R R E C T		P W M					*
//----------------------------------------------------------------------*
// Режим Phase Correct PWM 												*
// Вектор прерывания: TIMER0_OVF_vect									*
// Частота прерываний: F_tim=F_CPU/(510*N)								*
//  где N - предделитель таймера										*
void TIMER8_0_PhasCorr_PWM(FuncState_t state_ISR);//с-ние прерывния
//----------------------------------------------------------------------*
//======================================================================*
//																		*
//	Настройка режима СОВПАДЕНИЯ и ВЫХОДОВ OC1A/OC1B	в режиме ШИМ		*
//																		*
//----------------------------------------------------------------------*
// Настройка режима СОВПАДЕНИЯ и  ВЫХОДА OC0							*
// Вектор прерывания: TIMER0_COMP_vect									*
void TIMER8_0_PWM_OCR0(uint8_t OCR, // значение регистра СРАВНЕНИЯ		*
		  FuncState_t state_ISR, // настройка ПРЕРЫВАНИЯ			*
					 pwm_OC_t count); // настройка режима ВЫВОДОВ ОС0	*
//***********************************************************************

//***********************************************************************
//																		*
//		Принудительное изменение состояния вывода OC0					*
//																		*
//----------------------------------------------------------------------*
//	Изменение состояния вывода ОС0										*
#define TIMER8_0_OC0_toggle()		tccr0->foc0=1					//	*
//***********************************************************************

//***********************************************************************
//																		*
//		Установка маски (разрешения/запрета) прерывания					*
//																		*
//----------------------------------------------------------------------*
//	Установка маски ПЕРЕПОЛНЕНИЯ для TIMER8_0							*
#define TIMER8_0_ISR_OVERFLOW(state)		timsk->toie0=state		//	*
//----------------------------------------------------------------------*
//	Установка маски СРАВНЕНИЯ для OCR0 для TIMER8_0						*
#define TIMER8_0_ISR_COMPARE(state)			timsk->ocie0=state		//	*
//***********************************************************************


//***********************************************************************
//																		*
//		Запуск/Остановка 	T I M E R 8_0 								*
//																		*
//----------------------------------------------------------------------*
#ifndef TIMER_CLK													//	*
#define TIMER_CLK													//	*
//----------------------------------------------------------------------*
#define TIMER_CLK_STOP		0x00	///< Timer0 остановлен				*
#define TIMER_CLK_DIV1		0x01	///< Timer считает как F_CPU		*
#define TIMER_CLK_DIV8		0x02	///< Timer считает как F_CPU/8		*
#define TIMER_CLK_DIV64		0x03	///< Timer считает как F_CPU/64		*
#define TIMER_CLK_DIV256	0x04	///< Timer считает как F_CPU/256	*
#define TIMER_CLK_DIV1024	0x05	///< Timer считает как F_CPU/1024	*
#define TIMER_CLK_T_FALL	0x06	///< Timer считывает сигнал с 		*
									// вывода T0 по спадающему фронту	*
#define TIMER_CLK_T_RISE	0x07	///< Timer считывает сигнал с 		*
									// вывода T0 по нарастающему фронту	*
//----------------------------------------------------------------------*
#endif																//	*
//----------------------------------------------------------------------*
//	Запуск/Остановка TIMER8_0											*
#define TIMER8_0_RUN(clk)	tccr0->cs0=clk							//	*
//***********************************************************************


//***********************************************************************
//																		*
//		Проверка флагов прерывания для TIMER8_0							*
//																		*
//----------------------------------------------------------------------*
//	Проверка флага ПЕРЕПОЛНЕНИЯ для TIMER8_0							*
#define TIMER8_0_IS_FLAG_OVERFLOW()		tifr->tov0					//	*
//----------------------------------------------------------------------*
//	Проверка флага СРАВНЕНИЯ для OCR0 для TIMER8_0						*
#define TIMER8_0_IS_FLAG_COMPARE()		tifr->ocf0					//	*
//***********************************************************************


//***********************************************************************
//																		*
//		Сброс флагов прерывания для TIMER8_0							*
//																		*
//----------------------------------------------------------------------*
//	Сброс флага ПЕРЕПОЛНЕНИЯ для TIMER16_1								*
#define TIMER8_0_FLAG_RESET_OVERFLOW()			TIFR=(1<<TOV0)		//	*
//----------------------------------------------------------------------*
//	Сброс флага СРАВНЕНИЯ для OCR1A для TIMER16_1						*
#define TIMER8_0_FLAG_RESET_COMPARE()			TIFR=(1<<OCF0)		//	*
//***********************************************************************



#endif
