#ifndef __AVR_CMSIS__
#define __AVR_CMSIS__
#include <avr/io.h>
#include <osa.h>
#include <atmega16_32_conf.h>

#if !defined ( __AVR_ATmega16__ )
#if !defined ( __AVR_ATmega16A__ )
#if !defined ( __AVR_ATmega32__ )
#error "This device isn't atmega16 or atmega32"
#endif
#endif
#endif
// отключение оптимизации для компилятора
#define   __I   volatile const  /*!< defines 'read only' permissions   */
#define   __O   volatile    /*!< defines 'write only' permissions   */
#define   __IO  volatile    /*!< defines 'read / write' permissions  */


//***********************************************************************
//																		*
//		Дополнительные типы данных для работы с периферий				*
//																		*
//----------------------------------------------------------------------*
typedef enum														//	*
{
OFF=0,	//	Отключение												*
ON=1	// 	Включение												*
} FuncState_t ;												//	*
//#define FuncState_t FunctionalState_t
//----------------------------------------------------------------------*
#ifndef UINT16HL_T													//	*
#define UINT16HL_T													//	*
//	Доступ к младшим и старшим разрядам									*
typedef union														//	*
{																	//	*
uint16_t HL;	// 16 битный регистр									*
struct{																//	*
uint8_t L;		// 8 битный регистр младший	байт						*
uint8_t H;		// 8 битный регистр старший	байт						*
};																	//	*
} uint16hl_t;														//	*
#endif																//	*
//----------------------------------------------------------------------*
typedef union														//	*
{																	//	*
uint8_t all;		// 8 битный регистр									*
struct
{
uint8_t b0 :1;		//													*
uint8_t b1 :1;		//													*
uint8_t b2 :1;		//													*
uint8_t b3 :1;		//													*
uint8_t b4 :1;		//													*
uint8_t b5 :1;		//													*
uint8_t b6 :1;		//													*
uint8_t b7 :1;		//													*
};
}byte_t;			//													*
//-----------------------------------------------------------------------
// Тип данных для работы с CallBack функциями переадресации передачи	*
// символов																*
typedef void (*VoidFuncChar_t)(char);						//			*
//***********************************************************************

//***********************************************************************
//																		*
//		Тип данных для управления КОМПАРАТОРОМ							*
//																		*
//----------------------------------------------------------------------*
// Регистр управления КОМПАРАТОРОМ										*
typedef struct														//	*
{																	//	*
__IO uint8_t acis	:2;	// условие прерывания							*
__IO uint8_t acic	:1;	// Захват для Timer1							*
__IO uint8_t acie	:1;	// разрешение прерывания						*
__IO uint8_t aci	:1;	// флаг прерывания компаратора					*
__IO uint8_t aco	:1;	// результат сравения							*
__IO uint8_t acbg	:1;	// Подключение AIN0 к ИОН						*
__IO uint8_t acd	:1;	// Включение компаратора						*
} acsr_t;															//	*
//***********************************************************************




//***********************************************************************
//																		*
// 		Тип данных для управления внешними прерываниями					*
//																		*
//______________________________________________________________________*
//	Включение прерывания для ВНЕШНЕГО ПРЕРЫВАНИЯ						*
typedef struct			//												*
{						//												*
__IO uint8_t ivce	:1;	//												*
__IO uint8_t ivsel	:1;	//												*
__IO uint8_t reserv	:3;	// зарезервированно								*
__IO uint8_t int2	:1;	// прерывание INT2								*
__IO uint8_t int0	:1;	// прерывание INT0								*
__IO uint8_t int1	:1;	// прерывание INT1								*
} gicr_t;				//												*
//----------------------------------------------------------------------*
// Регистр флага прерываний												*
typedef struct			//												*
{						//												*
__IO uint8_t reserv	:5;	// зарезервированно								*
__IO uint8_t intf2	:1;	// прерывание INT2								*
__IO uint8_t intf0	:1;	// прерывание INT0								*
__IO uint8_t intf1	:1;	// прерывание INT1								*
} gifr_t;				//												*
//----------------------------------------------------------------------*
// Регистр настройки причины прерывания									*
typedef struct
{
__IO uint8_t isc0	:2;	// настройка события INT0						*
__IO uint8_t isc1	:2;	// настройка события INT1						*
} mcucr_t;

typedef struct
{
__IO uint8_t reserv	:6;	// зарезервированно								*
__IO uint8_t isc2	:1;	// настройка события INT2						*
} mcucsr_t;
//***********************************************************************

//***********************************************************************
//																		*
//		Тип данных для ПОРТОВ ВВОДА-ВЫВОДА 								*
//																		*
//______________________________________________________________________*
// Регистры НАСТРОЙКИ, ЧТЕНИЯ, ВЫВОДА									*
typedef struct														//	*
{					//													*
__IO uint8_t p0	:1;	//													*
__IO uint8_t p1	:1;	//													* 
__IO uint8_t p2	:1;	// 													*
__IO uint8_t p3	:1;	// 													*
__IO uint8_t p4	:1;	// 													*
__IO uint8_t p5	:1;	// 													*
__IO uint8_t p6	:1;	//													*
__IO uint8_t p7	:1;	//													*
}port_t;			//													*
//***********************************************************************


//***********************************************************************
//																		*
//		Тип данных для управления АЦП									*
//																		*
//______________________________________________________________________*
typedef struct			//												*
{						//												*
__IO uint8_t adps	:3;	// Выбор частоты преобразования					*
__IO uint8_t adie	:1;	// Разрешение прерывания от АЦП					*
__IO uint8_t adif	:1;	// Флаг прерывания от АЦП						*
__IO uint8_t adate	:1;	// Выбор режима работы							*
__IO uint8_t adsc	:1;	// запуск преобразования						*
__IO uint8_t aden	:1;	// Включение АЦП								*
} adcsra_t;				//												*
//----------------------------------------------------------------------*
typedef struct			//												*
{						//												*
__IO uint8_t mux	:5;	// Выбор канал									*
__IO uint8_t adlar	:1;	// Выравнивание результата						*
__IO uint8_t refs	:2;	// Выбор источника опорного напряжения			*
} admux_t;				//												*
//----------------------------------------------------------------------*
typedef struct			//												*
{						//												*
__IO uint8_t psr10	:1;	// сброс предделителя таймера					*
__IO uint8_t psr2	:1;	// сброс предделителя таймера					*
__IO uint8_t pud	:1;	// отключение подтягивающих резисторов			*
__IO uint8_t acme	:1;	// выбор мультиплексора для КОМПАРАТОРА			*
__IO uint8_t reserve:1;	// резерв										*
__IO uint8_t adts	:3;	// Источник стартового сигнала					*
} sfior_t;				//												*
//***********************************************************************

//***********************************************************************
//																		*
//		Тип данных для управления ТАЙМЕРАМИ								*
//																		*
//______________________________________________________________________* 
//	Тип данных для работы в ассинхронном режиме							*
typedef struct														//	*
{																	//	*
__IO uint8_t tcr2ub	:1;	// обновление регистра TCCR						*
__IO uint8_t ocr2ub	:1;	// обновление регистра OCR						*
__IO uint8_t tcn2ub	:1;	// обновление регистра TCNT						*
__IO uint8_t as2	:1;	// настройка асинхронного режим					*
} assr_t;															//	*
//----------------------------------------------------------------------*
//	Тип данных для управления ТАЙМЕРОМ_0								*
typedef struct														//	*
{																	//	*
__IO uint8_t cs0	:3;	// предделитель таймера							*
__IO uint8_t wgm01	:1;	// настройка режим таймера						*
__IO uint8_t com0	:2;	// настройка выводов							*
__IO uint8_t wgm00	:1;	// настройка режим таймера						*
__IO uint8_t foc0	:1;	// принудительное измнение состояния выводы ОС	*
} tccr0_t;				//												*
//----------------------------------------------------------------------*
//	Тип данных для управления ТАЙМЕРОМ_2
typedef struct
{
__IO uint8_t cs2	:3;	// предделитель таймера							*
__IO uint8_t wgm21	:1;	// настройка режим таймера						*
__IO uint8_t com2	:2;	// настройка выводов							*
__IO uint8_t wgm20	:1;	// настройка режим таймера						*
__IO uint8_t foc2	:1;	// принудительное измнение состояния выводы ОС	*
} tccr2_t;
//----------------------------------------------------------------------*
//	Тип включения прерываний ТАЙМЕРОВ 0,1,2								*
typedef struct
{
__IO uint8_t toie0	:1;	// переполнения TIMER8_0						*
__IO uint8_t ocie0	:1;	// совпадение 	TIMER8_0						*
__IO uint8_t toie1	:1;	// переполнения 	TIMER16_1					*
__IO uint8_t ocie1b	:1;	// совпадение OCR1B	TIMER16_1					*
__IO uint8_t ocie1a	:1;	// совпадение OCR1A	TIMER16_1					*
__IO uint8_t ticie1	:1; // захват     ICR1	TIMER16_1					*
__IO uint8_t toie2	:1;	// переполнения TIMER8_2						*
__IO uint8_t ocie2	:1;	// совпадение 	TIMER8_2						*
} timsk_t;
//----------------------------------------------------------------------*
//	Тип данных флагов для ТАЙМЕРОВ 0,1,2
typedef struct
{
__IO uint8_t tov0	:1;	// переполнения TIMER8_0						*
__IO uint8_t ocf0	:1;	// совпадение 	TIMER8_0						*
__IO uint8_t tov1	:1;	// переполнения 	TIMER16_1					*
__IO uint8_t ocf1b	:1;	// совпадение OCR1B	TIMER16_1					*
__IO uint8_t ocf1a	:1;	// совпадение OCR1A	TIMER16_1					*
__IO uint8_t icf1	:1; // захват     ICR1	TIMER16_1					*
__IO uint8_t tov2	:1;	// переполнения TIMER8_2						*
__IO uint8_t ocf2	:1;	// совпадение 	TIMER8_2						*
} tifr_t;
//----------------------------------------------------------------------*
//	Тип данных для настройки ТАЙМЕРА16_1								*
typedef struct
{
__IO uint8_t wgm1	:2;	// настройка режима таймера						*
__IO uint8_t foc1b	:1;	// принудительное измнение состояния выводы ОС1B*
__IO uint8_t foc1a	:1;	// принудительное измнение состояния выводы ОС1A*
__IO uint8_t com1b	:2;	// настройка выводов COM1B						*
__IO uint8_t com1a	:2; // настройка выводов COM1A						*
} tccr1a_t;
//----------------------------------------------------------------------*
typedef struct
{
__IO uint8_t cs1	:3;	// предделитель таймера							*
__IO uint8_t wgm1	:2;	// настройка режима таймера						*
__IO uint8_t reserve:1;	// зарезервированно								*
__IO uint8_t ices1	:1;	// выбор фронта захвата							*
__IO uint8_t icnc1	:1;	// настройка фильтрования						*
} tccr1b_t;
//***********************************************************************

//***********************************************************************
//																		*
//		Тип данных для управления USART									*
//																		*
//----------------------------------------------------------------------*
// Регистр управления USART												*
typedef struct														//	*
{																	//	*
__IO uint8_t mpcm	:1;	// мультипроцессорная связь						*
__IO uint8_t u2x	:1;	// двойная скорость передачи					*
__IO uint8_t upe	:1;	// ошибка проверки четности						*
__IO uint8_t dor	:1;	// переполнение буфера данных					*
__IO uint8_t fe		:1;	// ошибка пакета								*
__IO uint8_t udre	:1;	// флаг опустошения буфера передатчика			*
__IO uint8_t txc	:1;	// флаг завершения передачи						*
__IO uint8_t rxc	:1;	// флаг завершения приема						*
} ucsra_t;															//	*
//----------------------------------------------------------------------*
typedef struct														//	*
{																	//	*
__IO uint8_t txb8	:1;	// передача 8 бита (данные)						*
__IO uint8_t rxb8	:1;	// прием 8 бита (данные)						*
__IO uint8_t ucsz2	:1;	// кол-во бит для передачи (3)					*
__IO uint8_t txen	:1;	// включение передатчика						*
__IO uint8_t rxen	:1;	// включение приемника							*
__IO uint8_t udrie	:1;	// включение прерывания опустошения буф. данных	*
__IO uint8_t txcie	:1;	// включение прерывания передачи				*
__IO uint8_t rxcie	:1;	// включение прерывания приема					*
} ucsrb_t;															//	*
//***********************************************************************
typedef union														//	*
{																	//	*
__IO uint8_t all;		// 8 битный регистр								*
struct																//	*
{																	//	*
__IO uint8_t ucpol	:1;	// полярность тактового сигнала					*
__IO uint8_t ucsz	:2;	// кол-во бит для передачи						*
__IO uint8_t usbs	:1;	// кол-во стоповых бит							*
__IO uint8_t upm	:2;	// бит четности									*
__IO uint8_t umsel	:1;	// режим работы (синхрон/асинхрон)				*
__IO uint8_t ursel	:1;	// выбор для записи данных в регистр UCSRC (=1)	*
}; 
}ucsrc_t;															//	*

//***********************************************************************
//																		*
//		Тип данных для управления SPI									*
//																		*
//----------------------------------------------------------------------*
// Регистр управления SPI												*
typedef struct														//	*
{																	//	*
__IO uint8_t spr	:2;	// делитель частоты модуля SPI					*
__IO uint8_t cpha	:1;	// фаза тактирования							*
__IO uint8_t cpol	:1;	// полярность тактирования						*
__IO uint8_t mstr	:1;	// режим мастера								*
__IO uint8_t dord	:1;	// порядок передачи данных						*
__IO uint8_t spe	:1;	// включение модуля SPI							*
__IO uint8_t spie	:1;	// включение прерывания SPI						*
} spcr_t;															//	*
//----------------------------------------------------------------------*
// Регистр статуса SPI													*
typedef struct														//	*
{																	//	*
__IO uint8_t spi2x	:1;	// фаза тактирования							*
__IO uint8_t res	:5;	// зарезервированно								*
__IO uint8_t wcol	:1;	// коллизия										*
__IO uint8_t spif	:1;	// флаг прерывания								*
} spsr_t;															//	*
//***********************************************************************



//***********************************************************************
//																		*
// 		Регистры для Компаратора										*
//																		*
//----------------------------------------------------------------------*
#define acsr	((acsr_t*) 	&ACSR)  // указатель на включение прерываний*
//***********************************************************************

//*******************************************************************************
//																				*
// 		Регистры для Аналого-Цифрового Преобразователя							*
//																				*
//------------------------------------------------------------------------------*
#define adcsra	((adcsra_t*) &ADCSRA) // указатель на регистру управления АЦП	*
#define admux	((admux_t*)	 &ADMUX)  // указатель на регистру управления АЦП	*
#define sfior	((sfior_t*)  &SFIOR)  // указатель на регистру управления АЦП	*
//*******************************************************************************


//*******************************************************************************
//																				*
// 		Регистры для Внешних прерываний											*
//																				*
//------------------------------------------------------------------------------*
#define gicr	((gicr_t*) 	&GICR)  // указатель на включение прерываний		*
#define gifr	((gifr_t*) 	&GIFR)  // указатель на флаг прерывания				*
#define mcucr	((mcucr_t*) &MCUCR) // указатель на событие прерывания			*
#define mcucsr	((mcucsr_t*)&MCUCSR)// указатель на событие прерывания			*
//*******************************************************************************

//*******************************************************************************
//																				*
//		Определения для работы с таймерами										*
//																				*
//------------------------------------------------------------------------------*
#define porta	((port_t*) &PORTA) // указатель на выходной регистр				*
#define portb	((port_t*) &PORTB) // указатель на выходной регистр				*
#define portc	((port_t*) &PORTC) // указатель на выходной регистр				*
#define portd	((port_t*) &PORTD) // указатель на выходной регистр				*
								   //											*																	
#define ddra	((port_t*) &DDRA) // указатель на регистр управления			*
#define ddrb	((port_t*) &DDRB) // указатель на регистр управления 			*
#define ddrc	((port_t*) &DDRC) // указатель на регистр управления			*
#define ddrd	((port_t*) &DDRD) // указатель на регистр управления			*
								  //											*	
#define pina	((port_t*) &PINA) // указатель на регистр входа					*
#define pinb	((port_t*) &PINB) // указатель на регистр входа					*
#define pinc	((port_t*) &PINC) // указатель на регистр входа					*
#define pind	((port_t*) &PIND) // указатель на регистр входа					*
//*******************************************************************************

//*******************************************************************************
//																				*
//		Определения для работы с таймерами										*
//																				*
//------------------------------------------------------------------------------*
#define tccr0	((tccr0_t*)  &TCCR0) // указатель на рег-р управления TIMER_0	*
#define tccr2	((tccr2_t*)  &TCCR2) // указатель на рег-р управления TIMER_2	*
#define tccr1a	((tccr1a_t*) &TCCR1A)// указатель на рег-р управления TIMER1A	*
#define tccr1b	((tccr1b_t*) &TCCR1B)// указатель на рег-р управления TIMER1A	*
#define assr	((assr_t*) 	 &ASSR)  // указатель упр-я асинхронным режимом ASSR*
#define timsk	((timsk_t*) &TIMSK)  // указатель упр-ния прерываниями TIMER8_16*
#define tifr	((tifr_t*)  &TIFR)   // указатель флагов прерываний TIMER8_16	*
//*******************************************************************************

//*******************************************************************************
//																				*
// 		Регистры для USART														*
//																				*
//------------------------------------------------------------------------------*
#define ucsra	((ucsra_t*) &UCSRA)  // указатель на регистр управления А		*
#define ucsrb	((ucsrb_t*) &UCSRB)  // указатель на регистр управления B		*
#define ucsrc	((ucsrc_t*) &UCSRC)  // указатель на регистр управления C		*
//*******************************************************************************

//***********************************************************************
//																		*
// 		Регистры для SPI												*
//																		*
//----------------------------------------------------------------------*
#define spcr	((spcr_t*) 	&SPCR)  // указатель на включение прерываний*
#define spsr	((spsr_t*) 	&SPSR)  // указатель на включение прерываний*
//***********************************************************************




// Влючение дополнительных регистров

#include <driver_h/driver.h>

#endif









